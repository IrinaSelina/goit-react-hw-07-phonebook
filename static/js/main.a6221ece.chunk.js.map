{"version":3,"sources":["redux/form/form-actions.js","Components/Section/Section.js","redux/form/form-operations.js","redux/form/contacts-selectors.js","Components/Form/Form.js","Components/ContactList/ContactList.js","Components/Filter/Filter.js","App.js","redux/form/form-reducer.js","redux/store.js","index.js"],"names":["fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","addFilter","Section","children","className","actions","axios","defaults","baseURL","dispatch","a","get","data","name","number","items","post","then","catch","error","contactId","delete","getFilter","state","contacts","filter","getAllItems","getVisibleContacts","createSelector","toLowerCase","includes","InputForm","handleChange","e","setState","currentTarget","value","reset","handelSubmit","preventDefault","props","onSubmit","some","contact","alert","this","type","pattern","title","required","onChange","Component","connect","selectors","formOperations","onDelete","id","map","onClick","formActions","target","App","fetchContacts","createReducer","payload","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","roodReducer","formReducer","store","configureStore","reducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kVACMA,EAAuBC,YAAa,6BACpCC,EAAuBD,YAAa,6BACpCE,EAAqBF,YAAa,2BAUzB,GACbG,kBAVwBH,YAAa,0BAWrCI,kBAVwBJ,YAAa,0BAWrCK,gBAVsBL,YAAa,wBAWnCM,qBAV2BN,YAAa,6BAWxCO,qBAV2BP,YAAa,6BAWxCQ,mBAVyBR,YAAa,2BAWtCD,uBACAE,uBACAC,qBACAO,UAZgBT,YAAa,oB,eCLhBU,EAHC,SAAC,GAAD,IAAGC,EAAH,EAAGA,SAAH,OACd,yBAASC,UAAU,YAAnB,SAAgCD,K,iDCDhCZ,EASEc,EATFd,qBACAE,EAQEY,EARFZ,qBACAC,EAOEW,EAPFX,mBACAC,EAMEU,EANFV,kBACAC,EAKES,EALFT,kBACAC,EAIEQ,EAJFR,gBACAC,EAGEO,EAHFP,qBACAC,EAEEM,EAFFN,qBACAC,EACEK,EADFL,mBAEFM,IAAMC,SAASC,QAAU,wBACzB,I,EA4Be,EA5BO,yDAAM,WAAOC,GAAP,iBAAAC,EAAA,6DAC1BD,EAASlB,KADiB,kBAGDe,IAAMK,IAAI,aAHT,gBAGhBC,EAHgB,EAGhBA,KACRH,EAAShB,EAAqBmB,IAJN,gDAMxBH,EAASf,EAAmB,EAAD,KANH,yDAAN,uDA4BP,EAfI,SAACmB,EAAMC,GAAP,OAAkB,SAACL,GACpC,IAAMM,EAAQ,CAAEF,OAAMC,UACtBL,EAASd,KACTW,IACGU,KAAK,YAAaD,GAClBE,MAAK,gBAAGL,EAAH,EAAGA,KAAH,OAAcH,EAASb,EAAkBgB,OAC9CM,OAAM,SAACC,GAAD,OAAWV,EAASZ,EAAgBsB,SAShC,EAPO,SAACC,GAAD,OAAe,SAACX,GACpCA,EAASX,KACTQ,IACGe,OADH,oBACuBD,IACpBH,MAAK,kBAAMR,EAASV,EAAqBqB,OACzCF,OAAM,SAACC,GAAD,OAAWV,EAAST,EAAmBmB,S,QCvC5CG,EAAY,SAACC,GAAD,OAAWA,EAAMC,SAASC,QACtCC,EAAc,SAACH,GAAD,OAAWA,EAAMC,SAAST,OAgB/B,GACbO,YACAI,cACAC,mBAlByBC,YACzB,CAACN,EAAWI,IACZ,SAACD,EAAQD,GAAT,OACEA,EAASC,QAAO,qBAAGZ,KACZgB,cAAcC,SAASL,EAAOI,sBCAnCE,G,kNACJR,MAAQ,CACNV,KAAM,GACNC,OAAQ,I,EAEVkB,aAAe,SAACC,GACd,EAAKC,SAAL,eACGD,EAAEE,cAActB,KAAOoB,EAAEE,cAAcC,S,EAG5CC,MAAQ,WACN,EAAKH,SAAS,CACZrB,KAAM,GACNC,OAAQ,M,EAGZwB,aAAe,SAACL,GACdA,EAAEM,iBACF,MAAyB,EAAKhB,MAAtBV,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACd,EAA+B,EAAK0B,MAA5BhB,EAAR,EAAQA,SAAUiB,EAAlB,EAAkBA,SAElBjB,EAASkB,MACP,SAACC,GAAD,OAAa9B,EAAKgB,gBAAkBc,EAAQ9B,KAAKgB,iBAE/Ce,MAAM,GAAD,OAAI/B,EAAJ,6BACL4B,EAAS5B,EAAMC,GAEnB,EAAKuB,S,4CAGP,WACE,MAAyBQ,KAAKtB,MAAtBV,EAAR,EAAQA,KAAMC,EAAd,EAAcA,OACd,OACE,uBAAMV,UAAU,OAAOqC,SAAUI,KAAKP,aAAtC,UACE,wBAAOlC,UAAU,aAAjB,kBAEE,uBACEA,UAAU,aACV0C,KAAK,OACLjC,KAAK,OACLkC,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRC,SAAUL,KAAKb,aACfI,MAAOvB,OAGX,wBAAOT,UAAU,aAAjB,oBAEE,uBACEA,UAAU,aACV0C,KAAK,MACLjC,KAAK,SACLkC,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACRC,SAAUL,KAAKb,aACfI,MAAOtB,OAGX,wBAAQgC,KAAK,SAAb,iC,GA5DgBK,cAwETC,eAPS,SAAC7B,GAAD,MAAY,CAClCC,SAAU6B,EAAU3B,YAAYH,OAEP,SAACd,GAAD,MAAe,CACxCgC,SAAU,SAAC5B,EAAMC,GAAP,OAAkBL,EAAS6C,EAA0BzC,EAAMC,QAGxDsC,CAA6CrB,GCnC7CqB,G,MAAAA,aARS,SAAC7B,GAAD,MAAY,CAClCC,SAAU6B,EAAU1B,mBAAmBJ,OAGd,SAACd,GAAD,MAAe,CACxC8C,SAAU,SAACC,GAAD,OAAQ/C,EAAS6C,EAA6BE,QAG3CJ,EArCK,SAAC,GAAD,IAAG5B,EAAH,EAAGA,SAAU+B,EAAb,EAAaA,SAAb,OAClB,oBAAInD,UAAU,eAAd,SACGoB,EAASiC,KAAI,gBAAGD,EAAH,EAAGA,GAAI3C,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,qBAAIV,UAAU,eAAd,UACE,uBAAMA,UAAU,oBAAhB,UAAqCS,EAArC,OACA,sBAAMT,UAAU,sBAAhB,SAAuCU,IAEvC,wBACEV,UAAU,cACVsD,QAAS,kBAAMH,EAASC,IACxBV,KAAK,SAHP,sBAJgCU,YC4BzBJ,G,MAAAA,aAZS,SAAC7B,GAAD,MAAY,CAClCa,MAAOiB,EAAU/B,UAAUC,OAGF,SAACd,GAAD,MAAe,CACxCyC,SAAU,SAACjB,GAAD,OAAOxB,EAASkD,EAAY1D,UAAUgC,EAAE2B,OAAOxB,YAO5CgB,EA/BA,SAAC,GAAyB,IAAvBF,EAAsB,EAAtBA,SAAUd,EAAY,EAAZA,MAC1B,OACE,gCACE,wDACA,gCACE,uBACEhC,UAAU,cACV0C,KAAK,GACLjC,KAAK,SACLkC,QAAQ,yHACRC,MAAM,kcACNE,SAAUA,EACVd,MAAOA,aCTXyB,E,uKACJ,WACEhB,KAAKL,MAAMsB,kB,oBAOb,WACE,OACE,eAAC,EAAD,WACE,2CACA,cAAC,EAAD,IACA,0CACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GAhBUX,aA0BHC,cAAQ,MALI,SAAC3C,GAAD,MAAe,CACxCgC,SAAU,SAAChB,GAAD,OAAYhB,EAASkD,EAAY1D,UAAUwB,KACrDqC,cAAe,kBAAMrD,EAAS6C,SAGjBF,CAAkCS,G,8CC/B/CpE,IASEY,EAVFd,qBAUEc,EATFZ,sBAGAG,IAMES,EARFX,mBAQEW,EAPFV,kBAOEU,EANFT,mBAGAG,IAGEM,EALFR,gBAKEQ,EAJFP,qBAIEO,EAHFN,sBAEAE,IACEI,EAFFL,mBAEEK,EADFJ,WAEIc,GAAQgD,YAAc,IAAD,mBACxBtE,IAAuB,SAAC8B,EAAD,YAAUyC,WADT,cAExBpE,IAAoB,SAAC2B,EAAD,OAAUyC,EAAV,EAAUA,QAAV,4BAA4BzC,GAA5B,CAAmCyC,OAF/B,cAGxBjE,IAAuB,SAACwB,EAAD,OAAUyC,EAAV,EAAUA,QAAV,OACtBzC,EAAME,QAAO,qBAAG+B,KAAgBQ,QAJT,IAOrBvC,GAASsC,YAAc,GAAD,eACzB9D,IAAY,SAACsB,EAAD,YAAUyC,YAEVC,eAAgB,CAC7BlD,SACAU,YCZIyC,GAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAUIC,GAAcZ,YAAgB,CAClCzC,SAAUsD,KAKNC,GAAQC,YAAe,CAC3BC,QAASJ,GACTX,cACAgB,UAAUC,IAIG,IAAEJ,SAAOK,UAFNC,YAAaN,K,MCjC/BO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUT,MAAOA,GAAMA,MAAvB,SACE,cAAC,EAAD,QAMJU,SAASC,eAAe,W","file":"static/js/main.a6221ece.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\nconst fetchContactsRequest = createAction(\"contact/fetchItemsRequest\");\r\nconst fetchContactsSuccess = createAction(\"contact/fetchItemsSuccess\");\r\nconst fetchContactsError = createAction(\"contact/fetchItemsError\");\r\nconst addContactRequest = createAction(\"contact/addItemRequest\");\r\nconst addContactSuccess = createAction(\"contact/addItemSuccess\");\r\nconst addContactError = createAction(\"contact/addItemError\");\r\nconst deleteContactRequest = createAction(\"contact/deleteItemRequest\");\r\nconst deleteContactSuccess = createAction(\"contact/deleteItemSuccess\");\r\nconst deleteContactError = createAction(\"contact/deleteItemError\");\r\n\r\nconst addFilter = createAction(\"contacts/Filter\");\r\n\r\nexport default {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addFilter,\r\n};\r\n","import React from \"react\";\r\nimport \"./Section.css\";\r\n\r\nconst Section = ({ children }) => (\r\n  <section className=\"container\">{children}</section>\r\n);\r\nexport default Section;\r\n","import axios from \"axios\";\r\nimport actions from \"./form-actions\";\r\nconst {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} = actions;\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(fetchContactsRequest());\r\n  try {\r\n    const { data } = await axios.get(\"/contacts\");\r\n    dispatch(fetchContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(fetchContactsError(error));\r\n  }\r\n  // axios\r\n  //   .get(\"/contacts\")\r\n  //   .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n  //   .catch((error) => dispatch(fetchContactsError(error)));\r\n};\r\nconst addContact = (name, number) => (dispatch) => {\r\n  const items = { name, number };\r\n  dispatch(addContactRequest());\r\n  axios\r\n    .post(\"/contacts\", items)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch((error) => dispatch(addContactError(error)));\r\n};\r\nconst deleteContact = (contactId) => (dispatch) => {\r\n  dispatch(deleteContactRequest());\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(deleteContactSuccess(contactId)))\r\n    .catch((error) => dispatch(deleteContactError(error)));\r\n};\r\nexport default { fetchContacts, addContact, deleteContact };\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getAllItems = (state) => state.contacts.items;\r\nconst getVisibleContacts = createSelector(\r\n  [getFilter, getAllItems],\r\n  (filter, contacts) =>\r\n    contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase())\r\n    )\r\n);\r\n// const getVisibleContacts = (state) => {\r\n//   const filter = getFilter(state);\r\n//   const contacts = getAllItems(state);\r\n//   return contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(filter.toLowerCase())\r\n//   );\r\n// };\r\n\r\nexport default {\r\n  getFilter,\r\n  getAllItems,\r\n  getVisibleContacts,\r\n};\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport formOperations from \"../../redux/form/form-operations\";\r\nimport selectors from \"../../redux/form/contacts-selectors\";\r\nimport \"./Form.css\";\r\n\r\nclass InputForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.currentTarget.name]: e.currentTarget.value,\r\n    });\r\n  };\r\n  reset = () => {\r\n    this.setState({\r\n      name: \"\",\r\n      number: \"\",\r\n    });\r\n  };\r\n  handelSubmit = (e) => {\r\n    e.preventDefault();\r\n    const { name, number } = this.state;\r\n    const { contacts, onSubmit } = this.props;\r\n\r\n    contacts.some(\r\n      (contact) => name.toLowerCase() === contact.name.toLowerCase()\r\n    )\r\n      ? alert(`${name} is already in contacts.`)\r\n      : onSubmit(name, number);\r\n\r\n    this.reset();\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form className=\"form\" onSubmit={this.handelSubmit}>\r\n        <label className=\"form-label\">\r\n          Name:\r\n          <input\r\n            className=\"form-input\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.handleChange}\r\n            value={name}\r\n          />\r\n        </label>\r\n        <label className=\"form-label\">\r\n          Number:\r\n          <input\r\n            className=\"form-input\"\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={this.handleChange}\r\n            value={number}\r\n          />\r\n        </label>\r\n        <button type=\"submit\">Add contacts</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = (state) => ({\r\n  contacts: selectors.getAllItems(state),\r\n});\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (name, number) => dispatch(formOperations.addContact(name, number)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(InputForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport formOperations from \"../../redux/form/form-operations\";\r\nimport selectors from \"../../redux/form/contacts-selectors\";\r\nimport \"./ContactList.css\";\r\n\r\nconst ContactList = ({ contacts, onDelete }) => (\r\n  <ul className=\"contact-list\">\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li className=\"contact-item\" key={id}>\r\n        <span className=\"contact-data-name\">{name}:</span>\r\n        <span className=\"contact-data-number\">{number}</span>\r\n\r\n        <button\r\n          className=\"delete__btn\"\r\n          onClick={() => onDelete(id)}\r\n          type=\"button\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>\r\n);\r\n\r\nContactList.propTypes = {\r\n  onDelete: PropTypes.func,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.number.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ).isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  contacts: selectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDelete: (id) => dispatch(formOperations.deleteContact(id)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport formActions from \"../../redux/form/form-actions\";\r\nimport \"./Filter.css\";\r\nimport selectors from \"../../redux/form/contacts-selectors\";\r\n\r\nconst Filter = ({ onChange, value }) => {\r\n  return (\r\n    <div>\r\n      <h3> Find contact dy name </h3>\r\n      <label>\r\n        <input\r\n          className=\"filter-form\"\r\n          type=\"\"\r\n          name=\"filter\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          onChange={onChange}\r\n          value={value}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: selectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) => dispatch(formActions.addFilter(e.target.value)),\r\n});\r\n\r\nFilter.propTypes = {\r\n  handleOnChange: PropTypes.func,\r\n  value: PropTypes.string.isRequired,\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\nimport { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport formActions from \"./redux/form/form-actions\";\nimport Section from \"./Components/Section\";\nimport Form from \"./Components/Form\";\nimport ContactList from \"./Components/ContactList\";\nimport Filter from \"./Components/Filter\";\nimport formOperations from \"./redux/form/form-operations\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.props.fetchContacts();\n  }\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (this.state.contacts !== prevState.contacts) {\n  //     localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n  //   }\n  // }\n  render() {\n    return (\n      <Section>\n        <h1>Phonebook</h1>\n        <Form />\n        <h2>Contacts</h2>\n        <Filter />\n        <ContactList />\n      </Section>\n    );\n  }\n}\nconst mapDispatchToProps = (dispatch) => ({\n  onSubmit: (filter) => dispatch(formActions.addFilter(filter)),\n  fetchContacts: () => dispatch(formOperations.fetchContacts()),\n});\n\nexport default connect(null, mapDispatchToProps)(App);\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport actions from \"./form-actions\";\r\nconst {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  addFilter,\r\n} = actions;\r\nconst items = createReducer([], {\r\n  [fetchContactsSuccess]: (state, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [addFilter]: (state, { payload }) => payload,\r\n});\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport formReducer from \"./form/form-reducer\";\r\n// import storage from \"redux-persist/lib/storage\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n// const persistConfig = {\r\n//   key: \"items\",\r\n//   storage,\r\n//   blacklist: [\"filter\"],\r\n// };\r\n\r\nconst roodReducer = combineReducers({\r\n  contacts: formReducer,\r\n  // contacts: persistReducer(persistConfig, formReducer),\r\n});\r\n// const persistedReducer = persistReducer(persistConfig, roodReducer);\r\n\r\nconst store = configureStore({\r\n  reducer: roodReducer,\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\n// import { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\n\nimport \"./index.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <App />\n      {/* <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate> */}\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}